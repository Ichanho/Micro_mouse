;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <math.h>
;#include "Sensor.h"
;#include "StepMotor.h"
;#include "LED.h"
;#include "switch.h"
;#include "UART1.h"
;#include "Algorithm.h"
;
;void InitializeSensor(void)
; 0001 000D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 000E      // ¹ß±¤¼¾¼­ PORTB 5,6,7
; 0001 000F      PORTB &= 0x1f;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0001 0010      DDRB |= 0xe0;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 0011      // ¼ö±¤¼¾¼­ PORTF 0,1,2
; 0001 0012      PORTF &= 0xf8;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0001 0013      DDRF |= 0xf8;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 0014 
; 0001 0015      ADMUX=ADC_VREF_TYPE;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 0016      ADCSRA=0x87;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0001 0017 }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;
;unsigned int read_adc(unsigned char adc_input)
; 0001 001A {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0001 001B     ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0001 001C     // Delay needed for the stabilization of the ADC input voltage
; 0001 001D     delay_us(10);
;PCODE: $00000026 VOL: 0
; 0001 001E     // Start the AD conversion
; 0001 001F     ADCSRA|=0x40;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 0020     // Wait for the AD conversion to complete
; 0001 0021     while ((ADCSRA & 0x10)==0);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0001 0022     ADCSRA|=0x10;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0001 0023     return ADCW;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0001 0024 }
;PCODE: $00000034 VOL: 0
;
;unsigned int readSensor(char si)
; 0001 0027 {
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0001 0028      unsigned int ret;
; 0001 0029 
; 0001 002A      switch(si)
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;	si -> Y+2
;	ret -> R16,R17
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0001 002B      {
; 0001 002C           case FRONT_SENSOR:
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0001 002D                PORTB.5=1;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0001 002E                delay_us(30);
;PCODE: $0000003F VOL: 0
; 0001 002F                ret = read_adc(si);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0001 0030                PORTB.5=0;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0001 0031                break;
;PCODE: $00000046 VOL: 0
; 0001 0032           case LEFT_SENSOR:
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0001 0033                PORTB.6=1;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0001 0034                delay_us(30);
;PCODE: $0000004C VOL: 0
; 0001 0035                ret = read_adc(si);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0001 0036                PORTB.6=0;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0001 0037                break;
;PCODE: $00000053 VOL: 0
; 0001 0038           case RIGHT_SENSOR:
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0001 0039                PORTB.7=1;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0001 003A                delay_us(30);
;PCODE: $00000059 VOL: 0
; 0001 003B                ret = read_adc(si);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0001 003C                PORTB.7=0;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0001 003D                break;
;PCODE: $00000060 VOL: 0
; 0001 003E      }
;PCODE: $00000061 VOL: 0
; 0001 003F      return ret;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0001 0040 }
;PCODE: $00000069 VOL: 0
