;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <math.h>
;#include "Sensor.h"
;#include "StepMotor.h"
;#include "LED.h"
;#include "switch.h"
;#include "UART1.h"
;#include "Algorithm.h"
;
;unsigned char poutput;
;
;
;// Get a character from the USART1 Receiver
;#pragma used+
;char getchar1(void)
; 0005 0012 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0005 0013 char status,data;
; 0005 0014 while (1)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
; 0005 0015 {
; 0005 0016 while (((status=UCSR1A) & RX_COMPLETE)==0);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0005 0017 data=UDR1;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0005 0018 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0005 0019 return data;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0005 001A };
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0005 001B }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;#pragma used-
;
;// Write a character to the USART1 Transmitter
;#pragma used+
;void putchar1(char c)
; 0005 0021 {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0005 0022 while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
;	c -> Y+0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0005 0023 UDR1=c;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0005 0024 }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;#pragma used-
;
;void putchar(char c)
; 0005 0028 {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0005 0029 switch (poutput)
;	c -> Y+0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0005 002A {
; 0005 002B case USART0: // the output will be directed to USART0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0005 002C while ((UCSR0A & DATA_REGISTER_EMPTY)==0);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0005 002D UDR0=c;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0005 002E break;
;PCODE: $00000042 VOL: 0
; 0005 002F 
; 0005 0030 case USART1: // the output will be directed to USART1
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0005 0031 while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0005 0032 UDR1=c;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0005 0033 };
;PCODE: $0000004E VOL: 0
; 0005 0034 }
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;
;unsigned char getchar(void)
; 0005 0037 {
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0005 0038 switch (poutput)
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0005 0039 {
; 0005 003A case USART0: // the input will be directed to USART0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0005 003B while ((UCSR0A & RX_COMPLETE)==0);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0005 003C return UDR0;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0005 003D break;
;PCODE: $00000060 VOL: 0
; 0005 003E 
; 0005 003F case USART1: // the input will be directed to USART1
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0005 0040 while ((UCSR1A & RX_COMPLETE)==0);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0005 0041 return UDR1;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0005 0042 };
;PCODE: $0000006C VOL: 0
; 0005 0043 }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
