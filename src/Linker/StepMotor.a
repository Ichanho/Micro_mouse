;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <math.h>
;#include "Sensor.h"
;#include "StepMotor.h"
;#include "LED.h"
;#include "switch.h"
;#include "UART1.h"
;#include "Algorithm.h"
;int acc=0;
;int acc_allow=0;
;char rotateR[8] = {0b1001,0b0001,0b0101,0b0100,0b0110,0b0010,0b1010,0b1000};

	.DSEG
;char rotateL[8] = {0b1001,0b1000,0b1010,0b0010,0b0110,0b0100,0b0101,0b0001};
;int LeftstepCount, RightstepCount;		// rotateR과 rotateL의 각각 스텝이 모터에 순서대로 입력되도록 Count
;unsigned int VelocityLeftmotorTCNT1, VelocityRightmotorTCNT3;	// 왼쪽과 오른쪽 모터의 TCNT 속도
;int vel_counter_high_R,vel_counter_high_L;
;unsigned char direction_control;		// 인터럽트 루틴에 방향정보를 전달하기 위한 전역변수
;extern eeprom int StandardSensor[3], CenterStandardSensor[3];
;int vel_counter_high=65380;
;
;     struct {
;          int nStep4perBlock;			// 한 블록 이동시 필요한 모터회전 스텝 정보
;          int nStep4Turn90;			// 90도 턴 이동시 필요한 모터회전 스텝 정보
;     } Information;
;     struct {
;          char LmotorRun;			// 왼쪽 모터가 회전했는지에 대한 Flag
;          char RmotorRun;			// 오른쪽 모터가 회전했는지에 대한 Flag
;     } Flag;
;
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0002 0020 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 0021      switch(direction_control)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0002 0022      {
; 0002 0023           case LEFT:
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0002 0024                PORTD |= (rotateL[LeftstepCount]<<4);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0002 0025                PORTD &= ((rotateL[LeftstepCount]<<4)+0x0f);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0002 0026                LeftstepCount--;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0002 0027                if(LeftstepCount < 0)
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0002 0028                     LeftstepCount = sizeof(rotateL)-1;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0002 0029                break;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0002 002A           case RIGHT:
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0002 002B           case BACK:
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0002 002C           case FORWARD:
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0002 002D           case HALF:
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0002 002E                PORTD |= (rotateL[LeftstepCount]<<4);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0002 002F                PORTD &= ((rotateL[LeftstepCount]<<4)+0x0f);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0002 0030                LeftstepCount++;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0002 0031                LeftstepCount %= sizeof(rotateL);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0002 0032                break;
;PCODE: $00000057 VOL: 0
; 0002 0033      }
;PCODE: $00000058 VOL: 0
; 0002 0034      Flag.LmotorRun = TRUE;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0002 0035 
; 0002 0036      TCNT1H = VelocityLeftmotorTCNT1 >> 8;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0002 0037      TCNT1L = VelocityLeftmotorTCNT1 & 0xff;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0002 0038 }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;
;interrupt [TIM3_OVF] void timer3_ovf_isr(void)
; 0002 003B {
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0002 003C      switch(direction_control)
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0002 003D      {
; 0002 003E           case RIGHT:
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0002 003F           case BACK:
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0002 0040                PORTE |= (rotateR[RightstepCount]<<4);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0002 0041                PORTE &= ((rotateR[RightstepCount]<<4)+0x0f);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0002 0042                RightstepCount--;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0002 0043                if(RightstepCount < 0)
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0002 0044                     RightstepCount = sizeof(rotateR)-1;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0002 0045                break;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0002 0046           case FORWARD:
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0002 0047           case HALF:
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0002 0048           case LEFT:
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0002 0049                PORTE |= (rotateR[RightstepCount]<<4);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0002 004A                PORTE &= ((rotateR[RightstepCount]<<4)+0x0f);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0002 004B                RightstepCount++;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0002 004C                RightstepCount %= sizeof(rotateR);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0002 004D                break;
;PCODE: $000000AE VOL: 0
; 0002 004E      }
;PCODE: $000000AF VOL: 0
; 0002 004F      Flag.RmotorRun = TRUE;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0002 0050 
; 0002 0051      TCNT3H = VelocityRightmotorTCNT3 >> 8;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0002 0052      TCNT3L = VelocityRightmotorTCNT3 & 0xff;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0002 0053 }
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;
;void InitializeStepMotor(void)
; 0002 0056 {
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0002 0057 
; 0002 0058      float distance4perStep;
; 0002 0059 
; 0002 005A      PORTD&=0x0F;
;PCODE: $000000BD VOL: 0
;	distance4perStep -> Y+0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0002 005B      DDRD|=0xF0;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0002 005C 
; 0002 005D      PORTE&=0x0F;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0002 005E      DDRE|=0xF0;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0002 005F 
; 0002 0060      TCCR1A=0x00;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0002 0061      TCCR1B=0x04;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0002 0062      TCNT1H=0x00;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0002 0063      TCNT1L=0x00;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0002 0064      ICR1H=0x00;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0002 0065      ICR1L=0x00;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0002 0066      OCR1AH=0x00;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0002 0067      OCR1AL=0x00;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0002 0068      OCR1BH=0x00;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0002 0069      OCR1BL=0x00;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0002 006A      OCR1CH=0x00;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0002 006B      OCR1CL=0x00;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0002 006C 
; 0002 006D      TCCR3A=0x00;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0002 006E      TCCR3B=0x04;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0002 006F      TCNT3H=0x00;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0002 0070      TCNT3L=0x00;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0002 0071      ICR3H=0x00;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0002 0072      ICR3L=0x00;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0002 0073      OCR3AH=0x00;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0002 0074      OCR3AL=0x00;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0002 0075      OCR3BH=0x00;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0002 0076      OCR3BL=0x00;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0002 0077      OCR3CH=0x00;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0002 0078      OCR3CL=0x00;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0002 0079 
; 0002 007A      TIMSK=0x04;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0002 007B      ETIMSK=0x04;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0002 007C 
; 0002 007D 	distance4perStep = (float)(3.5 * TIRE_RAD / (float)MOTOR_STEP);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0002 007E 	Information.nStep4perBlock = (int)((float)205 / distance4perStep);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0002 007F 	Information.nStep4Turn90 = (int)((PI*MOUSE_WIDTH/3.41)/distance4perStep);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0002 0080 }
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;
;int adjustmouse(void)
; 0002 0083 {
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0002 0084 	int adjLeftSensor,adjRightSensor;
; 0002 0085 	int adjflagcnt = 0;
; 0002 0086 
; 0002 0087 	adjLeftSensor = readSensor(LEFT_SENSOR);
;PCODE: $00000110 VOL: 0
;	adjLeftSensor -> R16,R17
;	adjRightSensor -> R18,R19
;	adjflagcnt -> R20,R21
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0002 0088 	adjRightSensor = readSensor(RIGHT_SENSOR);
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0002 0089 
; 0002 008A 	vel_counter_high_L=VelocityLeftmotorTCNT1;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0002 008B     	vel_counter_high_R=VelocityRightmotorTCNT3;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0002 008C 
; 0002 008D 	if((adjRightSensor < StandardSensor[2])		// 오른쪽 벽이 존재하지 않을 경우
; 0002 008E 	|| (adjLeftSensor < StandardSensor[1]))		// 왼쪽 벽이 존재하지 않을 경우
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0002 008F 	{
; 0002 0090 		vel_counter_high_L = vel_counter_high;	// 속도를 같게하고 리턴
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0002 0091 		vel_counter_high_R = vel_counter_high;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0002 0092 		return 0;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0002 0093 	}
; 0002 0094 
; 0002 0095 	if(adjRightSensor < CenterStandardSensor[2])	// 오른쪽 벽이 멀 경우
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0002 0096 	{
; 0002 0097 		vel_counter_high_L+=5;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0002 0098 		vel_counter_high_R-=5;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0002 0099 		if(vel_counter_high_L > vel_counter_high+35)
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0002 009A 		{
; 0002 009B 			vel_counter_high_L = vel_counter_high+35;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0002 009C 		}
; 0002 009D 
; 0002 009E 		if(vel_counter_high_R < (vel_counter_high - 35))
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0002 009F 		{
; 0002 00A0 			vel_counter_high_R = (vel_counter_high - 35);
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0002 00A1 		}
; 0002 00A2 	}
;PCODE: $0000014F VOL: 0
; 0002 00A3 	else
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0002 00A4 	adjflagcnt++;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0002 00A5 
; 0002 00A6 	if(adjLeftSensor < CenterStandardSensor[1])	// 왼쪽 벽이 멀 경우
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0002 00A7 	{
; 0002 00A8 		vel_counter_high_L-=5;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0002 00A9 		vel_counter_high_R+=5;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0002 00AA 		if(vel_counter_high_R > vel_counter_high+35)
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0002 00AB 		{
; 0002 00AC 			vel_counter_high_R = vel_counter_high+35;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0002 00AD 		}
; 0002 00AE 		if(vel_counter_high_L < (vel_counter_high - 35))
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0002 00AF 		{
; 0002 00B0 			vel_counter_high_L = (vel_counter_high - 35);
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0002 00B1 		}
; 0002 00B2 	}
;PCODE: $00000170 VOL: 0
; 0002 00B3 	else
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0002 00B4 	adjflagcnt++;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0002 00B5 
; 0002 00B6 	if(adjflagcnt == 2)				// 오른쪽 벽과 왼쪽 벽이 둘다 멀지 않을 경우
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0002 00B7 	{							// 속도 동일하게
; 0002 00B8 		vel_counter_high_L = vel_counter_high;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0002 00B9 		vel_counter_high_R = vel_counter_high;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0002 00BA 		return 0;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0002 00BB 	}
; 0002 00BC 		return 1;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0002 00BD }
;PCODE: $00000186 VOL: 0
;
;void Direction(int mode)
; 0002 00C0 {
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0002 00C1      int LStepCount = 0, RStepCount = 0;
; 0002 00C2 
; 0002 00C3      TCCR1B = 0x04;
;PCODE: $00000189 VOL: 0
;	mode -> Y+4
;	LStepCount -> R16,R17
;	RStepCount -> R18,R19
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0002 00C4      TCCR3B = 0x04;
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0002 00C5 
; 0002 00C6      direction_control = mode;
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0002 00C7 
; 0002 00C8      Flag.LmotorRun = FALSE;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0002 00C9      Flag.RmotorRun = FALSE;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0002 00CA 
; 0002 00CB      switch(mode)
;PCODE: $00000199 VOL: 0
; 0002 00CC      {
; 0002 00CD      case FORWARD:
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0002 00CE           while(LStepCount<Information.nStep4perBlock || RStepCount<Information.nStep4perBlock)
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0002 00CF           {
; 0002 00D0                if(Flag.LmotorRun)
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0002 00D1                {
; 0002 00D2                     LStepCount++;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0002 00D3                     Flag.LmotorRun = FALSE;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0002 00D4                }
; 0002 00D5                if(Flag.RmotorRun)
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0002 00D6                {
; 0002 00D7                     RStepCount++;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0002 00D8                     Flag.RmotorRun = FALSE;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0002 00D9                }
; 0002 00DA           }
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0002 00DB           break;
;PCODE: $000001B9 VOL: 0
; 0002 00DC 
; 0002 00DD      case HALF:
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0002 00DE           while(LStepCount<(Information.nStep4perBlock>>1) || RStepCount<(Information.nStep4perBlock>>1))
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0002 00DF           {
; 0002 00E0                if(readSensor(FRONT_SENSOR) > CenterStandardSensor[0])
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0002 00E1                {
; 0002 00E2                     break;
;PCODE: $000001CE VOL: 0
; 0002 00E3                }
; 0002 00E4                if(Flag.LmotorRun || Flag.RmotorRun)
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0002 00E5                {
; 0002 00E6                     adjustmouse();
;PCODE: $000001D9 VOL: 0
; 0002 00E7                     VelocityLeftmotorTCNT1=vel_counter_high_L;
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0002 00E8                     VelocityRightmotorTCNT3=vel_counter_high_R;
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0002 00E9                }
; 0002 00EA                if(Flag.LmotorRun)
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0002 00EB                {
; 0002 00EC                     LStepCount++;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0002 00ED                     Flag.LmotorRun = FALSE;
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0002 00EE                }
; 0002 00EF                if(Flag.RmotorRun)
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0002 00F0                {
; 0002 00F1                     RStepCount++;
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0002 00F2                     Flag.RmotorRun = FALSE;
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0002 00F3                }
; 0002 00F4           }
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0002 00F5 
; 0002 00F6           break;
;PCODE: $000001F3 VOL: 0
; 0002 00F7      case LEFT:
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0002 00F8           VelocityLeftmotorTCNT1 = 65350;	// 왼쪽 모터의 속도 (65200 ~ 65535)
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0002 00F9           VelocityRightmotorTCNT3 = 65350;	// 오른쪽 모터의 속도 (65200 ~ 65535)
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0002 00FA           while(LStepCount<Information.nStep4Turn90 || RStepCount<Information.nStep4Turn90)
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0002 00FB           {
; 0002 00FC                if(Flag.LmotorRun)
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0002 00FD                {
; 0002 00FE                     LStepCount++;
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0002 00FF                     Flag.LmotorRun = FALSE;
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0002 0100                }
; 0002 0101                if(Flag.RmotorRun)
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0002 0102                {
; 0002 0103                     RStepCount++;
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0002 0104                     Flag.RmotorRun = FALSE;
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0002 0105                }
; 0002 0106           }
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0002 0107           break;
;PCODE: $0000021A VOL: 0
; 0002 0108      case RIGHT:
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0002 0109           VelocityLeftmotorTCNT1 = 65350;	// 왼쪽 모터의 속도 (65200 ~ 65535)
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0002 010A           VelocityRightmotorTCNT3 = 65350;	// 오른쪽 모터의 속도 (65200 ~ 65535)
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0002 010B           while(LStepCount<Information.nStep4Turn90 || RStepCount<Information.nStep4Turn90)
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0002 010C           {
; 0002 010D                if(Flag.LmotorRun)
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0002 010E                {
; 0002 010F                     LStepCount++;
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0002 0110                     Flag.LmotorRun = FALSE;
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0002 0111                }
; 0002 0112                if(Flag.RmotorRun)
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0002 0113                {
; 0002 0114                     RStepCount++;
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0002 0115                     Flag.RmotorRun = FALSE;
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0002 0116                }
; 0002 0117           }
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0002 0118           break;
;PCODE: $00000241 VOL: 0
; 0002 0119      case BACK:
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0002 011A           VelocityLeftmotorTCNT1 = 65300;	// 왼쪽 모터의 속도 (65200 ~ 65535)
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0002 011B           VelocityRightmotorTCNT3 = 65300;	// 오른쪽 모터의 속도 (65200 ~ 65535)
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0002 011C           while(LStepCount<(Information.nStep4Turn90*2) || RStepCount<(Information.nStep4Turn90*2))
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0002 011D           {
; 0002 011E                if(Flag.LmotorRun)
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0002 011F                {
; 0002 0120                     LStepCount++;
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0002 0121                     Flag.LmotorRun = FALSE;
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0002 0122                }
; 0002 0123                if(Flag.RmotorRun)
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0002 0124                {
; 0002 0125                     RStepCount++;
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0002 0126                     Flag.RmotorRun = FALSE;
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0002 0127                }
; 0002 0128           }
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0002 0129           break;
;PCODE: $00000268 VOL: 0
; 0002 012A      case QUARTER:
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0002 012B           while(LStepCount<((Information.nStep4perBlock>>1)>>1) || RStepCount<((Information.nStep4perBlock>>1)>>1))
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0002 012C           {
; 0002 012D 
; 0002 012E                if(Flag.LmotorRun)
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0002 012F                {
; 0002 0130                     LStepCount++;
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0002 0131                     Flag.LmotorRun = FALSE;
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0002 0132                }
; 0002 0133                if(Flag.RmotorRun)
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0002 0134                {
; 0002 0135                     RStepCount++;
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0002 0136                     Flag.RmotorRun = FALSE;
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0002 0137                }
; 0002 0138           }
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0002 0139 
; 0002 013A           break;
;PCODE: $0000028A VOL: 0
; 0002 013B      case TURN_L:
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0002 013C           while( RStepCount<(Information.nStep4perBlock>>1))
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0002 013D           {
; 0002 013E 
; 0002 013F 
; 0002 0140                if(Flag.RmotorRun)
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0002 0141                {
; 0002 0142                     RStepCount++;
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0002 0143                     Flag.RmotorRun = FALSE;
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0002 0144                }
; 0002 0145           }
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0002 0146 
; 0002 0147           break;
;PCODE: $0000029F VOL: 0
; 0002 0148      case TURN_R:
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0002 0149           while(LStepCount<(Information.nStep4perBlock>>1) )
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0002 014A           {
; 0002 014B 
; 0002 014C                if(Flag.LmotorRun)
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0002 014D                {
; 0002 014E                     LStepCount++;
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0002 014F                     Flag.LmotorRun = FALSE;
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0002 0150                }
; 0002 0151           }
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0002 0152 
; 0002 0153           break;
;PCODE: $000002B2 VOL: 0
; 0002 0154      }
;PCODE: $000002B3 VOL: 0
; 0002 0155      TCCR1B = 0x00;
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0002 0156      TCCR3B = 0x00;
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0002 0157 }
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
